<?xml version="1.0"?>
<doc>
<assembly>
<name>
Peer.PublicVBModule
</name>
</assembly>
<members>
<member name="T:Peer.PublicVBModule.VBReflection.ReflectSetNode">
	<summary>
 反射类配置信息类
 </summary>
	<remarks></remarks>
</member><member name="M:Peer.PublicVBModule.VBReflection.ReflectHelper.GetReflectSetDic(System.String)">
	<summary>
 获得内存配置结构
 </summary>
	<param name="OrgCode">组织的唯一标识</param>
	<returns>内存配置结构</returns>
	<remarks>不存在时先创建再返回</remarks>
</member><member name="M:Peer.PublicVBModule.VBReflection.ReflectHelper.GetOrgService(System.String)">
	<summary>
 获得组织的程序集信息
 </summary>
	<param name="OrgCode">组织的唯一标识</param>
	<returns>程序集内存结构</returns>
	<remarks>不存在时先创建再返回</remarks>
</member><member name="M:Peer.PublicVBModule.VBReflection.ReflectHelper.ParaAnalytic(System.String,System.Reflection.ParameterInfo[],System.Object[]@)">
	<summary>
 对xml的输入参数进行处理
 </summary>
	<param name="Paras">参数名和参数值组成的xml串</param>
	<param name="ParaInfo">具体方法的参数信息（包含参数名、参数类型）</param>
	<param name="ParasObj">格式化处理后的参数值</param>
	<remarks></remarks>
</member><member name="M:Peer.PublicVBModule.VBReflection.ReflectHelper.ExcuteDll(System.String,System.String,System.String,System.String,System.String,System.String)">
	<summary>
 执行DLL中的具体业务逻辑
 </summary>
	<param name="OrgCode">组织唯一标识符</param>
	<param name="CurDllPath">DLL路径</param>
	<param name="CurNameSpace">命名空间名称</param>
	<param name="CurClassName">类名</param>
	<param name="CurMethodName">方法名</param>
	<param name="Paras">传入的参数信息（XML结构）</param>
	<returns>返回object对象</returns>
	<remarks></remarks>
</member><member name="M:Peer.PublicVBModule.VBReflection.ReflectHelper.AddDllToMemory(System.String,System.String,System.String,System.String,System.String)">
	<summary>
 添加DLL中的具体业务逻辑
 </summary>
	<param name="OrgCode">组织唯一标识符</param>
	<param name="CurDllPath">DLL路径</param>
	<param name="CurNameSpace">命名空间名称</param>
	<param name="CurClassName">类名</param>
	<param name="CurMethodName">方法名</param>
	<remarks></remarks>
</member><member name="M:Peer.PublicVBModule.VBReflection.ReflectHelper.DeXmlSerialization(System.String)">
	<summary>
 xml反序列化
 </summary>
	<param name="PathName"></param>
	<remarks></remarks>
</member><member name="M:Peer.PublicVBModule.VBReflection.ReflectHelper.XmlSerialization(System.String,System.Collections.Generic.Dictionary{System.String,Peer.PublicVBModule.VBReflection.AssemblyInfo})">
	<summary>
 xml序列化当前内存结构
 </summary>
	<param name="PathName"></param>
	<remarks></remarks>
</member><member name="T:Peer.PublicVBModule.VBReflection.ReflectHelper">
	<summary>
 此类是通过反射机制加载外部DLL的辅助类;主要完成对与.net类库的动态调用
 </summary>
	<remarks></remarks>
</member><member name="M:Peer.PublicVBModule.VBXml.XmlSerialize.SerializeObjToStr``1(``0)">
	<summary>
 序列化 对象到字符串
 </summary>
	<typeparam name="T">泛型类型</typeparam>
	<param name="obj">泛型对象</param>
	<returns>序列化后的字符串</returns>
	<remarks></remarks>
</member><member name="M:Peer.PublicVBModule.VBXml.XmlSerialize.SerializeObjToFile``1(``0,System.String)">
	<summary>
 序列化对象到文件
 </summary>
	<typeparam name="T">泛型类型</typeparam>
	<param name="obj">泛型对象</param>
	<param name="PathName">文件全路径</param>
	<remarks></remarks>
</member><member name="M:Peer.PublicVBModule.VBXml.XmlSerialize.DesrializeStrToObj``1(System.String)">
	<summary>
 反序列化 字符串到对象
 </summary>
	<typeparam name="T">泛型类型</typeparam>
	<param name="str">要转换为对象的字符串</param>
	<returns>反序列化出来的对象</returns>
	<remarks></remarks>
</member><member name="M:Peer.PublicVBModule.VBXml.XmlSerialize.DesrializefileToObj``1(System.String)">
	<summary>
 反序列化 文件到对象
 </summary>
	<typeparam name="T">泛型类型</typeparam>
	<param name="pathName">文件路径</param>
	<returns>反序列化出来的对象</returns>
	<remarks></remarks>
</member><member name="M:Peer.PublicVBModule.VBLogToFile.LogManager.getLogInfo(System.Diagnostics.StackFrame)">
	<summary>
 在异常处理中返回具体位置（使用方法：dim trackRecord as string= LogManager.getLogInfo(new StackFrame(true))
 </summary>
	<param name="stackFrameins"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Peer.PublicVBModule.VBMessage.msgTemplate.Plat_Code">
	<summary>
 平台编码
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Peer.PublicVBModule.VBMessage.msgTemplate.MsgType">
	<summary>
 消息类别关键词
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Peer.PublicVBModule.VBMessage.msgTemplate.ToUserName">
	<summary>
 消息发送目的地
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Peer.PublicVBModule.VBMessage.msgTemplate.FromUserName">
	<summary>
 消息来源
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Peer.PublicVBModule.VBMessage.msgTemplate.CreateTime">
	<summary>
 消息创建时间
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Peer.PublicVBModule.VBMessage.msgTemplate.msgContent">
	<summary>
 消息内容(一般是把内容定义为 Dim lst As List(Of Object) = New List(Of Object)；在接收后解析时在进行object到list(of object)的转换）
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Peer.PublicVBModule.VBMessage.msgTemplate.MsgId">
	<summary>
 消息guid
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Peer.PublicVBModule.VBMessage.msgTemplate.#ctor">
	<summary>
 构造函数默认赋值消息id
 </summary>
	<remarks></remarks>
</member><member name="P:Peer.PublicVBModule.My.Resources.Resources.ResourceManager">
	<summary>
  返回此类使用的缓存的 ResourceManager 实例。
</summary>
</member><member name="P:Peer.PublicVBModule.My.Resources.Resources.Culture">
	<summary>
  使用此强类型资源类，为所有资源查找
  重写当前线程的 CurrentUICulture 属性。
</summary>
</member><member name="T:Peer.PublicVBModule.My.Resources.Resources">
	<summary>
  一个强类型的资源类，用于查找本地化的字符串等。
</summary>
</member>
</members>
</doc>